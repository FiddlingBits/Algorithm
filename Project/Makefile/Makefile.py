####################################################################################################
# Import
####################################################################################################

import os
import subprocess
import sys

####################################################################################################
# Constant
####################################################################################################

APPLICATION_FILES = [
    "../../Source/DataStructure/list.c",
    "../../Source/DataStructure/queue.c",
    "../../Source/DataStructure/stack.c",
    "../../Test/main.c",
    "../../Test/DataStructure/list_test.c",
    "../../Test/DataStructure/queue_test.c",
    "../../Test/DataStructure/stack_test.c"
]
APPLICATION_DEFINES = [
    "-DMAKEFILE_PROJECT"
]
APPLICATION_FLAGS = [
    "-std=c17",
    "-Weverything"
]
APPLICATION_INCLUDE_PATHS = [
    "-I../../Library/Unity/extras/fixture/src/",
    "-I../../Library/Unity/extras/memory/src/",
    "-I../../Library/Unity/src/",
    "-I../../Source/",
    "-I../../Source/DataStructure/"
]
BUILD_DIRECTORY = "Build"
COMPILER = "clang"
LIBRARY_FILES = [
    "../../Library/Unity/extras/fixture/src/unity_fixture.c",
    "../../Library/Unity/extras/memory/src/unity_memory.c",
    "../../Library/Unity/src/unity.c"
]
LIBRARY_DEFINES = [
]
LIBRARY_FLAGS = [
    "-Wno-everything"
]
LIBRARY_INCLUDE_PATHS = [
    "-I../../Library/Unity/extras/memory/src/",
    "-I../../Library/Unity/src/"
]
PROJECT_NAME = "Test"

####################################################################################################
# Function
####################################################################################################

def get_file_rule(build_directory, compiler, defines, flags, include_paths, file):
    # Get File Rule
    command = [compiler] + defines + flags + include_paths + ["-MM", file]
    output = subprocess.run(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, text=True).stdout
    if output.lower().find("error") != -1:
        print(f"{output}", flush=True)
        sys.exit()
    rule = f"{build_directory}/{output}"
    rule += f"\t@echo Compile: {os.path.basename(file)}\n"
    rule += f"\t@{compiler} {' '.join(defines)} {' '.join(flags)} {' '.join(include_paths)} -c {file} -o $@\n"
    return rule

####################################################################################################
# Program Start
####################################################################################################

# Create Makefile
with open("Makefile", "w") as makefile:
    # Header
    makefile.write("# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT!\n")
    
    # All
    makefile.write(f"all: {BUILD_DIRECTORY}/{PROJECT_NAME}.exe\n")
    makefile.write(f"\t@echo Run: {BUILD_DIRECTORY}/{PROJECT_NAME}.exe\n")
    makefile.write("\t@echo\n")
    makefile.write(f"\t@./{BUILD_DIRECTORY}/{PROJECT_NAME}.exe\n")
    
    # Executable
    o_files = " ".join([f"{BUILD_DIRECTORY}/" + os.path.splitext(os.path.basename(file))[0] + ".o" for file in (APPLICATION_FILES + LIBRARY_FILES)])
    makefile.write(f"{BUILD_DIRECTORY}/{PROJECT_NAME}.exe: {BUILD_DIRECTORY}/ {o_files}\n")
    makefile.write(f"\t@echo Link: {PROJECT_NAME}.exe\n")
    makefile.write(f"\t@{COMPILER} {BUILD_DIRECTORY}/*.o -o {BUILD_DIRECTORY}/{PROJECT_NAME}.exe\n")
    
    # Build Directory
    makefile.write(f"{BUILD_DIRECTORY}/:\n")
    makefile.write(f"\t@echo Create: {BUILD_DIRECTORY}/\n")
    makefile.write(f"\t@mkdir {BUILD_DIRECTORY}/\n")
    
    # File
    for file in APPLICATION_FILES:
        rule = get_file_rule(BUILD_DIRECTORY, COMPILER, APPLICATION_DEFINES, APPLICATION_FLAGS, APPLICATION_INCLUDE_PATHS, file)
        makefile.write(f"{rule}")
    for file in LIBRARY_FILES:
        rule = get_file_rule(BUILD_DIRECTORY, COMPILER, LIBRARY_DEFINES, LIBRARY_FLAGS, LIBRARY_INCLUDE_PATHS, file)
        makefile.write(f"{rule}")
    
    # Clean
    makefile.write("clean:\n")
    makefile.write("\t@echo Clean\n")
    makefile.write(f"\t@rm -fr {BUILD_DIRECTORY}\n")
